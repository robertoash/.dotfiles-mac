sgpt() {
    case "$1" in
        commit)
            case "$2" in
                create)
                    shift 2 # Remove 'commit create' from the arguments

                    local TEMP_FILE=$(mktemp)
                    trap "rm -f '$TEMP_FILE'" EXIT

                    # Generate commit message based on staged changes
                    git diff --cached | sgpt "Create a concise commit message. Just facts without embellishment" > "$TEMP_FILE"

                    # Clean up message format
                    awk 'BEGIN {RS=""; FS="\n"} {gsub(/^\n+|\n+$/, ""); print}' "$TEMP_FILE" > "$TEMP_FILE.tmp" && mv "$TEMP_FILE.tmp" "$TEMP_FILE"

                    ${EDITOR:-nano} "$TEMP_FILE"

                    echo "Do you want to proceed with the commit? [y/n]"
                    read -r user_input

                    case "$user_input" in
                        y|Y)
                            if [ -s "$TEMP_FILE" ]; then
                                git commit -F "$TEMP_FILE"
                            else
                                echo "Commit message is empty. Aborting commit."
                            fi
                            ;;
                        *)
                            echo "Commit aborted by user."
                            ;;
                    esac
                    ;;
                message)
                    local TEMP_FILE=$(mktemp)
                    trap "rm -f '$TEMP_FILE'" EXIT

                    git diff --cached | sgpt "Create a concise commit message. Just facts without embellishment" > "$TEMP_FILE"

                    # Trim and print to stdout instead of editing
                    awk 'BEGIN {RS=""; FS="\n"} {gsub(/^\n+|\n+$/, ""); print}' "$TEMP_FILE"
                    ;;
                *)
                    echo "Unsupported commit command: $2"
                    ;;
            esac
            ;;
        pr)
            case "$2" in
                create)
                    local DRAFT_FLAG=""
                    local TEMP_FILE=$(mktemp)
                    trap "rm -f '$TEMP_FILE'" EXIT

                    # Check for --draft argument
                    if [[ " $* " =~ " --draft " ]]; then
                        DRAFT_FLAG="--draft"
                    fi

                    # Fetch the latest changes from the remote without merging them
                    git fetch origin main:main --no-tags

                    # Generate a diff of your current branch against the fetched remote main branch
                    git diff FETCH_HEAD > "$TEMP_FILE"

                    # Pass the diff to sgpt with an appropriate prompt.
                    sgpt "Create a PR title and a concise description, without embellishment, based on the following changes. I will expect the first line to be the title and the rest to be the description." < "$TEMP_FILE" > "$TEMP_FILE.msg"

                    # Open the message in the editor for review and confirmation.
                    ${EDITOR:-nano} "$TEMP_FILE.msg"

                    # User confirmation before proceeding.
                    echo "Do you want to proceed with PR creation? [y/n]"
                    read -r user_input

                    if [[ "$user_input" =~ ^[Yy]$ ]]; then
                        # Extract title and body for the PR from the temp file.
                        local PR_TITLE=$(head -n 1 "$TEMP_FILE.msg")
                        local PR_BODY=$(tail -n +2 "$TEMP_FILE.msg")

                        # Create the PR and capture the URL.
                        local PR_URL=$(gh pr create --title "$PR_TITLE" --body "$PR_BODY" $DRAFT_FLAG --web)

                        echo "PR created and browser opened: $PR_URL"
                    else
                        echo "PR creation aborted."
                    fi
                    ;;

                review)
                    # Assuming the use of 'gh' to fetch the URL of the latest PR for the current branch.
                    local PR_URL=$(gh pr view --json url -q .url)

                    if [ -z "$PR_URL" ]; then
                        echo "No PR found for the current branch."
                        return
                    fi

                    # Fetching the diff of the latest PR and passing it to sgpt for review.
                    gh pr diff $(gh pr view --json number -q .number) | sgpt "Review the following PR changes:" > "$TEMP_FILE"

                    # Display the AI-enhanced review to stdout.
                    cat "$TEMP_FILE"
                    ;;

                message)
                    local TEMP_FILE=$(mktemp)
                    trap "rm -f '$TEMP_FILE'" EXIT

                    # Fetch the latest changes from the remote without merging them
                    git fetch origin main:main --no-tags

                    # Generate a diff of your current branch against the fetched remote main branch
                    git diff FETCH_HEAD > "$TEMP_FILE"

                    # Now, pass this diff to your sgpt tool as you were doing before
                    sgpt "Create a PR title and a description based on the following changes. For the description, bullet points are better than paragraph form. I will expect the first line to be the title and the rest to be the description. No labels ('Title:', 'Description:') are to be included in the response." < "$TEMP_FILE" > "$TEMP_FILE.msg"

                    # Continue with your process of extracting the title and body, then echoing or using them as needed
                    local PR_TITLE=$(head -n 1 "$TEMP_FILE.msg")
                    local PR_BODY=$(tail -n +2 "$TEMP_FILE.msg" | awk '{if(NR>1)print}' ORS='\n')

                    echo -e "PR Title:\n$PR_TITLE\n"
                    echo -e "PR Description:\n$PR_BODY"
                    ;;
                *)
                    echo "Unsupported pr command: $2"
                    ;;
            esac
            ;;

        *)
            # Delegate all other commands to the original sgpt application
            command sgpt "$@"
            ;;
    esac
}